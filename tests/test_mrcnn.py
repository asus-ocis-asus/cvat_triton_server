import os
import base64
from mask_rcnn.api import cvat_info, cvat_invoke
from mask_rcnn.utils import load_class_names

class_names = load_class_names(os.environ['LABEL_FILE_PATH'])

cvat_info_answer = {"framework":"tensorflow","spec": class_names,"type": "detector","description": "Mask RCNN"}

if os.environ['INFERENCE_DEVICE'] == 'GPU':
    cvat_invoke_answer = [{'confidence': '0.99959916', 'label': 'person', 'points': [104.0, 390.5, 85.0, 383.5, 55.0, 387.5, 44.5, 379.0, 54.5, 361.0, 55.5, 316.0, 53.5, 297.0, 39.5, 260.0, 44.5, 183.0, 41.5, 171.0, 29.5, 153.0, 27.5, 138.0, 29.5, 120.0, 37.5, 104.0, 48.0, 91.5, 59.0, 87.5, 72.5, 74.0, 86.0, 50.5, 97.0, 45.5, 106.5, 52.0, 114.5, 81.0, 136.5, 115.0, 141.5, 132.0, 133.5, 185.0, 136.5, 249.0, 124.5, 316.0, 119.5, 327.0, 122.5, 379.0, 104.0, 390.5], 'type': 'polygon'}, {'confidence': '0.9995334', 'label': 'person', 'points': [500.0, 402.5, 488.5, 398.0, 489.5, 384.0, 497.5, 376.0, 501.5, 362.0, 501.5, 343.0, 486.5, 288.0, 477.5, 229.0, 480.5, 166.0, 489.5, 127.0, 478.5, 83.0, 481.5, 71.0, 487.0, 68.5, 514.5, 70.0, 520.5, 99.0, 538.5, 123.0, 545.5, 143.0, 545.5, 205.0, 535.5, 284.0, 537.5, 386.0, 530.0, 393.5, 500.0, 402.5], 'type': 'polygon'}, {'confidence': '0.9994912', 'label': 'person', 'points': [201.0, 397.5, 192.0, 395.5, 181.0, 385.5, 170.0, 388.5, 164.5, 384.0, 153.5, 342.0, 148.5, 258.0, 151.5, 209.0, 149.5, 159.0, 157.5, 136.0, 172.0, 124.5, 183.0, 121.5, 197.5, 90.0, 210.0, 78.5, 218.0, 77.5, 226.5, 89.0, 228.5, 103.0, 221.5, 136.0, 227.5, 188.0, 220.5, 245.0, 214.5, 265.0, 213.5, 310.0, 209.5, 310.0, 206.0, 286.5, 196.5, 305.0, 194.5, 351.0, 208.5, 391.0, 201.0, 397.5], 'type': 'polygon'}, {'confidence': '0.9991417', 'label': 'person', 'points': [255.0, 376.5, 228.0, 375.5, 224.5, 372.0, 225.5, 337.0, 216.5, 264.0, 227.5, 196.0, 226.5, 141.0, 229.5, 123.0, 241.0, 101.5, 261.0, 99.5, 269.5, 104.0, 272.5, 113.0, 270.5, 146.0, 275.5, 173.0, 275.5, 211.0, 257.5, 350.0, 264.5, 372.0, 255.0, 376.5], 'type': 'polygon'}, {'confidence': '0.99869496', 'label': 'person', 'points': [320.0, 350.5, 313.5, 280.0, 313.5, 244.0, 318.5, 218.0, 304.5, 202.0, 304.5, 178.0, 314.5, 149.0, 338.5, 132.0, 340.5, 110.0, 345.5, 100.0, 350.0, 96.5, 367.0, 96.5, 372.5, 100.0, 375.5, 109.0, 372.5, 132.0, 377.5, 141.0, 387.5, 148.0, 396.5, 175.0, 396.5, 209.0, 384.5, 227.0, 385.5, 272.0, 380.0, 292.5, 364.0, 274.5, 344.0, 275.5, 330.5, 284.0, 322.5, 312.0, 320.0, 350.5], 'type': 'polygon'}, {'confidence': '0.9977786', 'label': 'fire hydrant', 'points': [363.0, 371.5, 326.0, 370.5, 322.5, 357.0, 315.5, 348.0, 314.5, 320.0, 320.5, 300.0, 328.5, 286.0, 342.0, 273.5, 369.0, 278.5, 380.5, 287.0, 380.5, 304.0, 369.5, 336.0, 367.5, 366.0, 363.0, 371.5], 'type': 'polygon'}, {'confidence': '0.9087212', 'label': 'person', 'points': [561.0, 194.5, 551.5, 192.0, 558.5, 188.0, 558.5, 170.0, 568.0, 167.5, 576.5, 174.0, 579.5, 186.0, 561.0, 194.5], 'type': 'polygon'}, {'confidence': '0.8998553', 'label': 'person', 'points': [159.0, 128.5, 143.5, 121.0, 132.5, 96.0, 132.5, 88.0, 156.0, 77.5, 159.5, 88.0, 167.0, 91.5, 169.0, 77.5, 167.5, 115.0, 159.0, 128.5], 'type': 'polygon'}, {'confidence': '0.883884', 'label': 'person', 'points': [135.0, 373.5, 132.5, 309.0, 135.5, 240.0, 131.5, 190.0, 140.5, 160.0, 143.5, 131.0, 132.5, 93.0, 138.0, 82.5, 153.0, 81.5, 159.5, 85.0, 161.5, 110.0, 147.5, 176.0, 149.5, 295.0, 147.5, 315.0, 139.5, 331.0, 135.0, 373.5], 'type': 'polygon'}, {'confidence': '0.8813602', 'label': 'car', 'points': [397.0, 271.5, 389.5, 269.0, 392.5, 233.0, 395.0, 229.5, 412.0, 228.5, 401.5, 269.0, 397.0, 271.5], 'type': 'polygon'}, {'confidence': '0.84097654', 'label': 'car', 'points': [409.0, 274.5, 403.5, 272.0, 402.5, 260.0, 407.5, 243.0, 412.5, 241.0, 410.5, 227.0, 414.0, 229.5, 419.5, 219.0, 427.0, 216.5, 435.5, 229.0, 434.5, 259.0, 427.0, 269.5, 418.0, 273.5, 412.5, 273.0, 411.0, 264.5, 409.0, 274.5], 'type': 'polygon'}, {'confidence': '0.7567023', 'label': 'handbag', 'points': [118.0, 276.5, 105.0, 276.5, 97.5, 263.0, 106.5, 244.0, 106.5, 228.0, 134.0, 224.5, 138.5, 258.0, 126.0, 273.5, 118.0, 276.5], 'type': 'polygon'}]
else:
    cvat_invoke_answer = [{'confidence': '0.99959916', 'label': 'person', 'points': [104.0, 390.5, 85.0, 383.5, 55.0, 387.5, 44.5, 379.0, 54.5, 361.0, 55.5, 316.0, 53.5, 297.0, 39.5, 260.0, 44.5, 183.0, 41.5, 171.0, 29.5, 153.0, 27.5, 138.0, 29.5, 120.0, 37.5, 104.0, 48.0, 91.5, 59.0, 87.5, 72.5, 74.0, 86.0, 50.5, 97.0, 45.5, 106.5, 52.0, 114.5, 81.0, 136.5, 115.0, 141.5, 132.0, 133.5, 185.0, 136.5, 249.0, 124.5, 316.0, 119.5, 327.0, 122.5, 379.0, 104.0, 390.5], 'type': 'polygon'}, {'confidence': '0.9995334', 'label': 'person', 'points': [500.0, 402.5, 488.5, 398.0, 489.5, 384.0, 497.5, 376.0, 501.5, 362.0, 501.5, 343.0, 486.5, 288.0, 477.5, 229.0, 480.5, 166.0, 489.5, 127.0, 478.5, 83.0, 481.5, 71.0, 487.0, 68.5, 514.5, 70.0, 520.5, 99.0, 538.5, 123.0, 545.5, 143.0, 545.5, 205.0, 535.5, 284.0, 537.5, 386.0, 530.0, 393.5, 500.0, 402.5], 'type': 'polygon'}, {'confidence': '0.99949145', 'label': 'person', 'points': [201.0, 397.5, 192.0, 395.5, 181.0, 385.5, 170.0, 388.5, 164.5, 384.0, 153.5, 342.0, 148.5, 258.0, 151.5, 209.0, 149.5, 159.0, 157.5, 136.0, 172.0, 124.5, 183.0, 121.5, 197.5, 90.0, 210.0, 78.5, 218.0, 77.5, 226.5, 89.0, 228.5, 103.0, 221.5, 136.0, 227.5, 188.0, 220.5, 245.0, 214.5, 265.0, 213.5, 310.0, 209.5, 310.0, 206.0, 286.5, 196.5, 305.0, 194.5, 351.0, 208.5, 391.0, 201.0, 397.5], 'type': 'polygon'}, {'confidence': '0.9991418', 'label': 'person', 'points': [255.0, 376.5, 228.0, 375.5, 224.5, 372.0, 225.5, 337.0, 216.5, 264.0, 227.5, 196.0, 226.5, 141.0, 229.5, 123.0, 241.0, 101.5, 261.0, 99.5, 269.5, 104.0, 272.5, 113.0, 270.5, 146.0, 275.5, 173.0, 275.5, 211.0, 257.5, 350.0, 264.5, 372.0, 255.0, 376.5], 'type': 'polygon'}, {'confidence': '0.9986945', 'label': 'person', 'points': [320.0, 350.5, 313.5, 280.0, 313.5, 244.0, 318.5, 218.0, 304.5, 202.0, 304.5, 178.0, 314.5, 149.0, 338.5, 132.0, 340.5, 110.0, 345.5, 100.0, 350.0, 96.5, 367.0, 96.5, 372.5, 100.0, 375.5, 109.0, 372.5, 132.0, 377.5, 141.0, 387.5, 148.0, 396.5, 175.0, 396.5, 209.0, 384.5, 227.0, 385.5, 272.0, 380.0, 292.5, 364.0, 274.5, 344.0, 275.5, 330.5, 284.0, 322.5, 312.0, 320.0, 350.5], 'type': 'polygon'}, {'confidence': '0.9977781', 'label': 'fire hydrant', 'points': [363.0, 371.5, 326.0, 370.5, 322.5, 357.0, 315.5, 348.0, 314.5, 320.0, 320.5, 300.0, 328.5, 286.0, 342.0, 273.5, 369.0, 278.5, 380.5, 287.0, 380.5, 304.0, 369.5, 336.0, 367.5, 366.0, 363.0, 371.5], 'type': 'polygon'}, {'confidence': '0.9087212', 'label': 'person', 'points': [561.0, 194.5, 551.5, 192.0, 558.5, 188.0, 558.5, 170.0, 568.0, 167.5, 576.5, 174.0, 579.5, 186.0, 561.0, 194.5], 'type': 'polygon'}, {'confidence': '0.8998556', 'label': 'person', 'points': [159.0, 128.5, 143.5, 121.0, 132.5, 96.0, 132.5, 88.0, 156.0, 77.5, 159.5, 88.0, 167.0, 91.5, 169.0, 77.5, 167.5, 115.0, 159.0, 128.5], 'type': 'polygon'}, {'confidence': '0.8838985', 'label': 'person', 'points': [135.0, 373.5, 132.5, 309.0, 135.5, 240.0, 131.5, 190.0, 140.5, 160.0, 143.5, 131.0, 132.5, 93.0, 138.0, 82.5, 153.0, 81.5, 159.5, 85.0, 161.5, 110.0, 147.5, 176.0, 149.5, 295.0, 147.5, 315.0, 139.5, 331.0, 135.0, 373.5], 'type': 'polygon'}, {'confidence': '0.8813871', 'label': 'car', 'points': [397.0, 271.5, 389.5, 269.0, 392.5, 233.0, 395.0, 229.5, 412.0, 228.5, 401.5, 269.0, 397.0, 271.5], 'type': 'polygon'}, {'confidence': '0.8410628', 'label': 'car', 'points': [409.0, 274.5, 403.5, 272.0, 402.5, 260.0, 407.5, 243.0, 412.5, 241.0, 410.5, 227.0, 414.0, 229.5, 419.5, 219.0, 427.0, 216.5, 435.5, 229.0, 434.5, 259.0, 427.0, 269.5, 418.0, 273.5, 412.5, 273.0, 411.0, 264.5, 409.0, 274.5], 'type': 'polygon'}, {'confidence': '0.7566499', 'label': 'handbag', 'points': [118.0, 276.5, 105.0, 276.5, 97.5, 263.0, 106.5, 244.0, 106.5, 228.0, 134.0, 224.5, 138.5, 258.0, 126.0, 273.5, 118.0, 276.5], 'type': 'polygon'}]
    
def test_mrcnn():
    with open(os.path.join(os.environ['PROJECT_DIR'], "tests", "mrcnn_test.jpg"), "rb") as f:
        data = f.read()
        data = base64.b64encode(data).decode()

    payload_dict = {"image": data, "threshold": 0.2}
    assert cvat_info() == cvat_info_answer
    results = cvat_invoke(payload_dict)
    print(results)
    assert results == cvat_invoke_answer
    

